<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby-on-rails | nekogeruge]]></title>
  <link href="http://onigra.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://onigra.github.io/"/>
  <updated>2013-05-02T10:35:04+09:00</updated>
  <id>http://onigra.github.io/</id>
  <author>
    <name><![CDATA[nekogeruge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[個人TDDBCを開いてもらった その1]]></title>
    <link href="http://onigra.github.io/blog/2013/05/01/kojin-tddbc/"/>
    <updated>2013-05-01T23:05:00+09:00</updated>
    <id>http://onigra.github.io/blog/2013/05/01/kojin-tddbc</id>
    <content type="html"><![CDATA[<p>以前に<a href="https://twitter.com/t_wada">t_wadaさん</a>の<a href="http://d.hatena.ne.jp/t-wada/20100228">RSpec入門記事</a>を写経し、なんとなくユニットテストの書き方とTDDのプロセスは理解したものの、より深くテストについて理解したかったため<a href="https://twitter.com/sunaot">sunaotさん</a>に個人TDDBCをやってもらいました。</p>

<p>ネタはこんな感じです。</p>

<ul>
<li>自分が作ってるrailsアプリを元にテストコードを書いてみつつリファクタリング</li>
<li>sunaotさんによるTDDお手本</li>
</ul>


<h2>自分が作ってるアプリのテストを書いてみる</h2>

<p>今回やってみたのは、下記のメソッドです。<br/>
リファクタリング前のコードを載せるのはかなり抵抗ありますね。</p>

<p>```ruby
module UsersHelper
  def name_check_of_uniquness(update_name, target_user_id)</p>

<pre><code>check_name = User.find_by_name(update_name)
if check_name.blank? || check_name.id == target_user_id
  return true
else
  return false
end
</code></pre>

<p>  end
end
```</p>

<p>やりたいことはこんな感じです。</p>

<ul>
<li>usersのnameはユニークであってほしいが、退会を<a href="https://github.com/goncalossilva/rails3_acts_as_paranoid">acts_as_paranoid</a>で管理しているため、nameに一意制約はつけられない</li>
<li>usersを更新する際、更新しようとしているusers.nameが退会していない全ユーザーとかぶらなければ更新OK</li>
<li>又は、更新しようとしているusers.nameがtarget_user_idと一致していれば更新OK。users.nameは変更せず、usersの他の項目のみ更新する場合があるため</li>
<li>もともとはhelperに書いてあったものをmodelに移す</li>
</ul>


<p>まず、失敗するテストを書きます。<br/>
(RSpecは使いませんでした)</p>

<p>```ruby</p>

<h1>coding: utf-8</h1>

<p>require 'test_helper'</p>

<h1>no method errorで失敗する</h1>

<p>class UserTest &lt; ActiveSupport::TestCase
  test "#usersを更新する際、更新しようとしているusers.nameが退会していない全ユーザーとかぶらなければ更新OK" do</p>

<pre><code>assert User.name_check_of_uniquness
</code></pre>

<p>  end
end
```</p>

<p>テストを実行します。</p>

<p><code>
bundle exec ruby -I test test/unit/user_test.rb
</code></p>

<p>次に、何も実装していないメソッドを書きます。</p>

<p>```ruby
class User &lt; ActiveRecord::Base
  acts_as_paranoid</p>

<p>  def self.name_check_of_uniquness
  end
end
```</p>

<p>テストを実行し、通ったら実装部分を書いていきます。まずは、下記の実装を行います。</p>

<ul>
<li>usersを更新する際、更新しようとしているusers.nameが退会していない全ユーザーとかぶらなければ更新OK</li>
</ul>


<p>(ついでに、冗長な記述をリファクタリングします)</p>

<p>```ruby
class User &lt; ActiveRecord::Base
  acts_as_paranoid</p>

<p>  def self.name_check_of_uniquness(update_name)</p>

<pre><code>check_name = User.find_by_name(update_name)
check_name.blank?
</code></pre>

<p>  end
end
```</p>

<p>ここで一度テストを実行。引数エラーで失敗します。<br/>
そして、テストを修正します。</p>

<p>```ruby</p>

<h1>coding: utf-8</h1>

<p>require 'test_helper'</p>

<p>class UserTest &lt; ActiveSupport::TestCase
  test "#usersを更新する際、更新しようとしているusers.nameが退会していない全ユーザーとかぶらなければ更新OK" do</p>

<pre><code>assert User.name_check_of_uniquness('new_user_name')
</code></pre>

<p>  end
end
```</p>

<p>これでテストが通ります。次に、下記の実装を行います。</p>

<ul>
<li>又は、更新しようとしているusers.nameがtarget_user_idと一致していれば更新OK。users.nameは変更せず、usersの他の項目のみ更新する場合があるため</li>
</ul>


<p>そしてこの実装は、users.nameの更新は無いがusersの他の項目は更新がある場合のケースのテストを行いたいため、テストケースを追加します。</p>

<p>```ruby</p>

<h1>coding: utf-8</h1>

<p>require 'test_helper'</p>

<h1>users.id = 1は退会していないアクティブなユーザーのテストデータ</h1>

<p>class UserTest &lt; ActiveSupport::TestCase
  test "#usersを更新する際、更新しようとしているusers.nameが退会していない全ユーザーとかぶらなければ更新OK" do</p>

<pre><code>assert User.name_check_of_uniquness('new_user_name') 
</code></pre>

<p>  end</p>

<p>  test "#更新しようとしているusers.nameがtarget_user_idと一致していれば更新OK" do</p>

<pre><code>assert User.name_check_of_uniquness('active_user_name') 
</code></pre>

<p>  end
end
```</p>

<p>ここでテストを実行。<code>active_user_name</code>はfixtureで作成しているユーザーなので、falseが返ってきて失敗します。<br/>
実装に入ります。</p>

<p>```ruby
class User &lt; ActiveRecord::Base
  acts_as_paranoid</p>

<p>  def self.name_check_of_uniquness(update_name, target_user_id)</p>

<pre><code>check_name = User.find_by_name(update_name)
check_name.blank? || check_name.id == target_user_id
</code></pre>

<p>  end
end
```</p>

<p>テストが通りました。さらに、falseを返すパターンもテストケースに追加したいため下記テストを追加します。</p>

<ul>
<li>ユーザー名は一致しているが、パラメータで渡されたtarget_user_idが一致していなかったらエラーを返す</li>
</ul>


<p>```ruby</p>

<h1>coding: utf-8</h1>

<p>require 'test_helper'</p>

<p>class UserTest &lt; ActiveSupport::TestCase
  test "#usersを更新する際、更新しようとしているusers.nameが退会していない全ユーザーとかぶらなければ更新OK" do</p>

<pre><code>assert User.name_check_of_uniquness('new_user_name', 1) 
</code></pre>

<p>  end</p>

<p>  test "#更新しようとしているusers.nameがtarget_user_idと一致していれば更新OK" do</p>

<pre><code>assert User.name_check_of_uniquness('active_user_name', 1) 
</code></pre>

<p>  end</p>

<p>  test '#ユーザー名は一致しているが、パラメータで渡されたユーザーIDと一致していないとエラー' do</p>

<pre><code>assert !User.name_check_of_uniquness('active_user_name', 3) 
</code></pre>

<p>  end
end
```</p>

<p>こんな感じでユニットテストを書きました。<br/>
コードへの突っ込みはあると思いますが、ユニットテストを考えるプロセスと書くプロセスについては理解を深めることができました。</p>

<p>ちょっと長くなったので、TDDお手本は次回に回します。</p>
]]></content>
  </entry>
  
</feed>
